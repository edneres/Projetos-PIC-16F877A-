CCS PCM C Compiler, Version 5.007, 61971               11-abr-22 18:35

               Filename:   C:\Users\edyne\OneDrive\Área de Trabalho\UFPI\Programação\2 - UFPI\3 - Projetos em C (PIC)\TIMERs\TIMER1\TIMER1.lst

               ROM used:   51 words (1%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   004
.................... /* 
.................... 	Faça um programa em C para implemetar um relógio usando o TIMER1   
.................... 	com um cristal externo de 32768Hz. 
.................... */ 
....................  
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #include "reg_16f.h" 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
....................  
.................... void main() 
0004:  BSF    03.5
0005:  BSF    1F.0
0006:  BSF    1F.1
0007:  BSF    1F.2
0008:  BCF    1F.3
0009:  MOVLW  07
000A:  MOVWF  1C
000B:  BCF    03.7
000C:  MOVLW  1F
000D:  ANDWF  03,F
000E:  BCF    03.5
000F:  CLRF   21
0010:  CLRF   22
0011:  CLRF   23
.................... { 
.................... 	unsigned int8 seg = 0, min = 0, hora = 0; // 8 bits de memória > essas variáveis não irão passar de 255 (decimal)  
....................  
.................... 	///////////////////////// 
.................... 	// CONFIGURAÇÃO DO MIC // 
.................... 	///////////////////////// 
....................  
....................     setup_timer_1 (T1_EXTERNAL_SYNC | T1_DIV_BY_1); // clk externo sincronizado [ou] e sem PRESCALER (divisor de frequência) 
0012:  MOVLW  83
0013:  MOVWF  10
.................... 												   // timer1 funcionando a partir do cristal externo de 32768Hz > timer1 rodando a essa freq. 
....................  
.................... 	// Preciso que o timer1 estoure a sua contagem a cada 1Hz (1/f) > fórmula da freq. externa: f = (32768 Hz) / (1 * 2^16 - x) = 1 -> x = 2^15 
.................... 	 
.................... 	//////////////////////////// 
.................... 	// INICIALIZÇÃO DO TIMER1 // 
.................... 	//////////////////////////// 
....................  
.................... 	// No lugar de set_timer1(32768); o melhor é usar o registrador: 
.................... 	TMR1H =0x00 ; TMR1L =0x00; // zera tudo 
0014:  CLRF   0F
0015:  CLRF   0E
.................... 	TMR1H |=0x80; // esse valor corresponde ao bit mais significativo de nível lógico alto > seta o bit mais significativo, equivalente a escrevermos o valor 32768 
0016:  BSF    0F.7
.................... 	 
.................... 	// Para uma temporização precisa é preciso acessar os registradores do timer1 > incluir arquivo dos registradores no código(regs_16f.h) e no arquivo do projeto 
....................  
....................     ////////////////////////////////// 
....................     // ETAPA DE EXECUÇÃO PERMANENTE // 
....................     ////////////////////////////////// 
....................  
....................     while (TRUE) 
....................     { 
.................... 		if (tmr1if) // Flag do timer1 > houve estouro do timer1? == Passou um segundo? 
0017:  BTFSS  0C.0
0018:  GOTO   031
....................     	{ 
.................... 			seg++; 
0019:  INCF   21,F
.................... 			output_toggle (pin_d0); // Comando do Ccsc (para o teste) > inverte o estado do pino d0 a cada 1 segundo 
001A:  BSF    03.5
001B:  BCF    08.0
001C:  MOVLW  01
001D:  BCF    03.5
001E:  XORWF  08,F
.................... 			 
.................... 			if (seg > 59) 
001F:  MOVF   21,W
0020:  SUBLW  3B
0021:  BTFSC  03.0
0022:  GOTO   02F
.................... 			{ 
.................... 				seg = 0; 
0023:  CLRF   21
.................... 				min++; 
0024:  INCF   22,F
.................... 		 
.................... 				if (min > 59) 
0025:  MOVF   22,W
0026:  SUBLW  3B
0027:  BTFSC  03.0
0028:  GOTO   02F
.................... 				{ 
.................... 					min = 0; 
0029:  CLRF   22
.................... 					hora++; 
002A:  INCF   23,F
....................  
.................... 					if (hora > 24) 
002B:  MOVF   23,W
002C:  SUBLW  18
002D:  BTFSS  03.0
.................... 						hora = 0; 
002E:  CLRF   23
.................... 				} 
.................... 			} 
....................  
.................... 			tmr1if = 0; 
002F:  BCF    0C.0
.................... 			TMR1H |=0x80; 
0030:  BSF    0F.7
.................... 		} 
0031:  GOTO   017
....................  
.................... 	} 
.................... } 
0032:  GOTO   032

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
